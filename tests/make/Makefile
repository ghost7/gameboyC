# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ..

# Where to find user code.
USER_DIR = ../..

TEST_DIR = ../unittests

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -std=c++0x

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = microOpTests memoryTests

MICRO_OP_TESTS = eightBitLoadTests sixteenBitLoadTests mathFlagsTests eightBitMathTests
MICRO_OP_TEST_OBJ = eightBitMathTests.o mathFlagsTests.o sixteenBitLoadTests.o eightBitLoadTests.o

MEMORY_TESTS = allMbcMemoryTest noMbcMemoryTest mbc1MemoryTest memory mbc1Memory mbc2Memory mbc3Memory mbc5Memory 
#MEMORY_TESTS_OBJ = allMbcMemoryTest.o noMbcMemoryTest.o mbc1MemoryTest.o memory.o mbc1Memory.o mbc2Memory.o mbc3Memory.o mbc5Memory.o 
MEMORY_TESTS_OBJ = allMbcMemoryTest.o mbc1MemoryTest.o memory.o mbc1Memory.o mbc2Memory.o mbc3Memory.o mbc5Memory.o 

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

micro_ops : $(MICRO_OP_TESTS)

memory: $(MEMORY_TESTS)

clean :
	rm -f $(TESTS) $(MICRO_OP_TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Micro op tests.

MICRO_OP_HEADERS = $(TEST_DIR)/microOpTestBase.h\
                   $(USER_DIR)/cpu_z80_inst.h $(USER_DIR)/registers.h 
FLAG_OP_HEADERS = $(MICRO_OP_HEADERS) $(TEST_DIR)/flagOpTestBase.h

cpu_z80_inst.o : $(USER_DIR)/cpu_z80_inst.c $(USER_DIR)/cpu_z80_inst.h $(USER_DIR)/registers.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/cpu_z80_inst.c

microOpTestBase.o : $(TEST_DIR)/microOpTestBase.cc  $(MICRO_OP_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/microOpTestBase.cc

flagOpTestBase.o : $(TEST_DIR)/flagOpTestBase.cc  $(FLAG_OP_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/flagOpTestBase.cc

eightBitLoadTests.o : $(TEST_DIR)/eightBitLoadTests.cc  $(MICRO_OP_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/eightBitLoadTests.cc

sixteenBitLoadTests.o : $(TEST_DIR)/sixteenBitLoadTests.cc  $(MICRO_OP_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/sixteenBitLoadTests.cc

mathFlagsTests.o : $(TEST_DIR)/mathFlagsTests.cc  $(FLAG_OP_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/mathFlagsTests.cc

eightBitMathTests.o : $(TEST_DIR)/eightBitMathTests.cc  $(MICRO_OP_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/eightBitMathTests.cc

microOpTests : microOpTestBase.o flagOpTestBase.o cpu_z80_inst.o $(MICRO_OP_TEST_OBJ) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

sixteenBitLoadTests : microOpTestBase.o cpu_z80_inst.o sixteenBitLoadTests.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

eightBitLoadTests : microOpTestBase.o cpu_z80_inst.o eightBitLoadTests.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

mathFlagsTests : microOpTestBase.o flagOpTestBase.o cpu_z80_inst.o mathFlagsTests.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

eightBitMathTests : microOpTestBase.o cpu_z80_inst.o eightBitMathTests.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@


# Memory tests

MEMORY_HEADERS = $(TEST_DIR)/memory/memoryTestBase.h $(USER_DIR)/memoryHeaders.h

memory.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/memory.cc

mbc1Memory.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/mbc1Memory.cc

mbc2Memory.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/mbc2Memory.cc

mbc3Memory.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/mbc3Memory.cc

mbc5Memory.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/mbc5Memory.cc

allMbcMemoryTest.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/memory/allMbcMemoryTest.cc

noMbcMemoryTest.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/memory/noMbcMemoryTest.cc

mbc1MemoryTest.o : $(MEMORY_HEADERS) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/memory/mbc1MemoryTest.cc

memoryTests : $(MEMORY_TESTS_OBJ) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
